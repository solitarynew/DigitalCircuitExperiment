|Keyboard
clk => clk.IN1
clrn => clrn.IN1
reset => reset.IN1
ps2_clk => ps2_clk.IN2
ps2_data => ps2_data.IN1
data[0] <= data[0].DB_MAX_OUTPUT_PORT_TYPE
data[1] <= data[1].DB_MAX_OUTPUT_PORT_TYPE
data[2] <= data[2].DB_MAX_OUTPUT_PORT_TYPE
data[3] <= data[3].DB_MAX_OUTPUT_PORT_TYPE
data[4] <= data[4].DB_MAX_OUTPUT_PORT_TYPE
data[5] <= data[5].DB_MAX_OUTPUT_PORT_TYPE
data[6] <= data[6].DB_MAX_OUTPUT_PORT_TYPE
data[7] <= data[7].DB_MAX_OUTPUT_PORT_TYPE
ready <= ready.DB_MAX_OUTPUT_PORT_TYPE
overflow <= ps2_keyboard:i.port7
HEX0[0] <= ascii:display.port3
HEX0[1] <= ascii:display.port3
HEX0[2] <= ascii:display.port3
HEX0[3] <= ascii:display.port3
HEX0[4] <= ascii:display.port3
HEX0[5] <= ascii:display.port3
HEX0[6] <= ascii:display.port3
HEX1[0] <= ascii:display.port4
HEX1[1] <= ascii:display.port4
HEX1[2] <= ascii:display.port4
HEX1[3] <= ascii:display.port4
HEX1[4] <= ascii:display.port4
HEX1[5] <= ascii:display.port4
HEX1[6] <= ascii:display.port4
HEX2[0] <= ascii:display.port5
HEX2[1] <= ascii:display.port5
HEX2[2] <= ascii:display.port5
HEX2[3] <= ascii:display.port5
HEX2[4] <= ascii:display.port5
HEX2[5] <= ascii:display.port5
HEX2[6] <= ascii:display.port5
HEX3[0] <= ascii:display.port6
HEX3[1] <= ascii:display.port6
HEX3[2] <= ascii:display.port6
HEX3[3] <= ascii:display.port6
HEX3[4] <= ascii:display.port6
HEX3[5] <= ascii:display.port6
HEX3[6] <= ascii:display.port6
HEX4[0] <= ascii:display.port7
HEX4[1] <= ascii:display.port7
HEX4[2] <= ascii:display.port7
HEX4[3] <= ascii:display.port7
HEX4[4] <= ascii:display.port7
HEX4[5] <= ascii:display.port7
HEX4[6] <= ascii:display.port7
HEX5[0] <= ascii:display.port8
HEX5[1] <= ascii:display.port8
HEX5[2] <= ascii:display.port8
HEX5[3] <= ascii:display.port8
HEX5[4] <= ascii:display.port8
HEX5[5] <= ascii:display.port8
HEX5[6] <= ascii:display.port8
caps <= ascii:display.port9
shift <= ascii:display.port10
ctrl <= ascii:display.port11
state[0] <= ascii:display.port12
state[1] <= ascii:display.port12


|Keyboard|out:o
kbdata[0] => data[0]$latch.DATAIN
kbdata[1] => data[1]$latch.DATAIN
kbdata[2] => data[2]$latch.DATAIN
kbdata[3] => data[3]$latch.DATAIN
kbdata[4] => data[4]$latch.DATAIN
kbdata[5] => data[5]$latch.DATAIN
kbdata[6] => data[6]$latch.DATAIN
kbdata[7] => data[7]$latch.DATAIN
ps2_clk => ~NO_FANOUT~
ready => data[0]$latch.LATCH_ENABLE
ready => data[1]$latch.LATCH_ENABLE
ready => data[2]$latch.LATCH_ENABLE
ready => data[3]$latch.LATCH_ENABLE
ready => data[4]$latch.LATCH_ENABLE
ready => data[5]$latch.LATCH_ENABLE
ready => data[6]$latch.LATCH_ENABLE
ready => data[7]$latch.LATCH_ENABLE
ready => nextdata_n.DATAIN
data[0] <= data[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[1] <= data[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[2] <= data[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[3] <= data[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[4] <= data[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[5] <= data[5]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[6] <= data[6]$latch.DB_MAX_OUTPUT_PORT_TYPE
data[7] <= data[7]$latch.DB_MAX_OUTPUT_PORT_TYPE
nextdata_n <= ready.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ps2_keyboard:i
clk => fifo.we_a.CLK
clk => fifo.waddr_a[2].CLK
clk => fifo.waddr_a[1].CLK
clk => fifo.waddr_a[0].CLK
clk => fifo.data_a[7].CLK
clk => fifo.data_a[6].CLK
clk => fifo.data_a[5].CLK
clk => fifo.data_a[4].CLK
clk => fifo.data_a[3].CLK
clk => fifo.data_a[2].CLK
clk => fifo.data_a[1].CLK
clk => fifo.data_a[0].CLK
clk => buffer[0].CLK
clk => buffer[1].CLK
clk => buffer[2].CLK
clk => buffer[3].CLK
clk => buffer[4].CLK
clk => buffer[5].CLK
clk => buffer[6].CLK
clk => buffer[7].CLK
clk => buffer[8].CLK
clk => buffer[9].CLK
clk => ready~reg0.CLK
clk => overflow~reg0.CLK
clk => r_ptr[0].CLK
clk => r_ptr[1].CLK
clk => r_ptr[2].CLK
clk => w_ptr[0].CLK
clk => w_ptr[1].CLK
clk => w_ptr[2].CLK
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => ps2_clk_sync[0].CLK
clk => ps2_clk_sync[1].CLK
clk => ps2_clk_sync[2].CLK
clk => fifo.CLK0
clrn => count.OUTPUTSELECT
clrn => count.OUTPUTSELECT
clrn => count.OUTPUTSELECT
clrn => count.OUTPUTSELECT
clrn => w_ptr.OUTPUTSELECT
clrn => w_ptr.OUTPUTSELECT
clrn => w_ptr.OUTPUTSELECT
clrn => r_ptr.OUTPUTSELECT
clrn => r_ptr.OUTPUTSELECT
clrn => r_ptr.OUTPUTSELECT
clrn => overflow.OUTPUTSELECT
clrn => ready.OUTPUTSELECT
clrn => fifo.OUTPUTSELECT
clrn => buffer[0].ENA
clrn => buffer[1].ENA
clrn => buffer[2].ENA
clrn => buffer[3].ENA
clrn => buffer[4].ENA
clrn => buffer[5].ENA
clrn => buffer[6].ENA
clrn => buffer[7].ENA
clrn => buffer[8].ENA
clrn => buffer[9].ENA
ps2_clk => ps2_clk_sync[0].DATAIN
ps2_data => always1.IN1
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
ps2_data => buffer.DATAB
data[0] <= fifo.DATAOUT
data[1] <= fifo.DATAOUT1
data[2] <= fifo.DATAOUT2
data[3] <= fifo.DATAOUT3
data[4] <= fifo.DATAOUT4
data[5] <= fifo.DATAOUT5
data[6] <= fifo.DATAOUT6
data[7] <= fifo.DATAOUT7
ready <= ready~reg0.DB_MAX_OUTPUT_PORT_TYPE
nextdata_n => r_ptr.OUTPUTSELECT
nextdata_n => r_ptr.OUTPUTSELECT
nextdata_n => r_ptr.OUTPUTSELECT
nextdata_n => ready.OUTPUTSELECT
overflow <= overflow~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display
reset => ascii[0].OUTPUTSELECT
reset => ascii[1].OUTPUTSELECT
reset => ascii[2].OUTPUTSELECT
reset => ascii[3].OUTPUTSELECT
reset => ascii[4].OUTPUTSELECT
reset => ascii[5].OUTPUTSELECT
reset => ascii[6].OUTPUTSELECT
reset => ascii[7].OUTPUTSELECT
reset => is_caps.ACLR
reset => is_last_f0.ACLR
reset => ctrl~reg0.ACLR
reset => shift~reg0.ACLR
reset => caps~reg0.ACLR
reset => state[0]~reg0.ACLR
reset => state[1]~reg0.ACLR
reset => count[0].ACLR
reset => count[1].ACLR
reset => count[2].ACLR
reset => count[3].ACLR
reset => count[4].ACLR
reset => count[5].ACLR
reset => count[6].ACLR
reset => count[7].ACLR
data[0] => data[0].IN1
data[1] => data[1].IN1
data[2] => data[2].IN1
data[3] => data[3].IN1
data[4] => data[4].IN1
data[5] => data[5].IN1
data[6] => data[6].IN1
data[7] => data[7].IN1
ready => ascii[0].CLK
ready => ascii[1].CLK
ready => ascii[2].CLK
ready => ascii[3].CLK
ready => ascii[4].CLK
ready => ascii[5].CLK
ready => ascii[6].CLK
ready => ascii[7].CLK
ready => is_caps.CLK
ready => is_last_f0.CLK
ready => ctrl~reg0.CLK
ready => shift~reg0.CLK
ready => caps~reg0.CLK
ready => state[0]~reg0.CLK
ready => state[1]~reg0.CLK
ready => count[0].CLK
ready => count[1].CLK
ready => count[2].CLK
ready => count[3].CLK
ready => count[4].CLK
ready => count[5].CLK
ready => count[6].CLK
ready => count[7].CLK
HEX0[0] <= decode_hex:d_hex0.port2
HEX0[1] <= decode_hex:d_hex0.port2
HEX0[2] <= decode_hex:d_hex0.port2
HEX0[3] <= decode_hex:d_hex0.port2
HEX0[4] <= decode_hex:d_hex0.port2
HEX0[5] <= decode_hex:d_hex0.port2
HEX0[6] <= decode_hex:d_hex0.port2
HEX1[0] <= decode_hex:d_hex1.port2
HEX1[1] <= decode_hex:d_hex1.port2
HEX1[2] <= decode_hex:d_hex1.port2
HEX1[3] <= decode_hex:d_hex1.port2
HEX1[4] <= decode_hex:d_hex1.port2
HEX1[5] <= decode_hex:d_hex1.port2
HEX1[6] <= decode_hex:d_hex1.port2
HEX2[0] <= decode_ascii_hex:d_hex2.port4
HEX2[1] <= decode_ascii_hex:d_hex2.port4
HEX2[2] <= decode_ascii_hex:d_hex2.port4
HEX2[3] <= decode_ascii_hex:d_hex2.port4
HEX2[4] <= decode_ascii_hex:d_hex2.port4
HEX2[5] <= decode_ascii_hex:d_hex2.port4
HEX2[6] <= decode_ascii_hex:d_hex2.port4
HEX3[0] <= decode_ascii_hex:d_hex3.port4
HEX3[1] <= decode_ascii_hex:d_hex3.port4
HEX3[2] <= decode_ascii_hex:d_hex3.port4
HEX3[3] <= decode_ascii_hex:d_hex3.port4
HEX3[4] <= decode_ascii_hex:d_hex3.port4
HEX3[5] <= decode_ascii_hex:d_hex3.port4
HEX3[6] <= decode_ascii_hex:d_hex3.port4
HEX4[0] <= decode_hex:d_hex4.port2
HEX4[1] <= decode_hex:d_hex4.port2
HEX4[2] <= decode_hex:d_hex4.port2
HEX4[3] <= decode_hex:d_hex4.port2
HEX4[4] <= decode_hex:d_hex4.port2
HEX4[5] <= decode_hex:d_hex4.port2
HEX4[6] <= decode_hex:d_hex4.port2
HEX5[0] <= decode_hex:d_hex5.port2
HEX5[1] <= decode_hex:d_hex5.port2
HEX5[2] <= decode_hex:d_hex5.port2
HEX5[3] <= decode_hex:d_hex5.port2
HEX5[4] <= decode_hex:d_hex5.port2
HEX5[5] <= decode_hex:d_hex5.port2
HEX5[6] <= decode_hex:d_hex5.port2
caps <= caps~reg0.DB_MAX_OUTPUT_PORT_TYPE
shift <= shift.DB_MAX_OUTPUT_PORT_TYPE
ctrl <= ctrl~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[0] <= state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[1] <= state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display|decode_hex:d_hex0
in[0] => Decoder0.IN3
in[1] => Decoder0.IN2
in[2] => Decoder0.IN1
in[3] => Decoder0.IN0
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
HEX[0] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= HEX.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display|decode_hex:d_hex1
in[0] => Decoder0.IN3
in[1] => Decoder0.IN2
in[2] => Decoder0.IN1
in[3] => Decoder0.IN0
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
HEX[0] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= HEX.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display|decode_ascii_hex:d_hex2
in[0] => Decoder0.IN3
in[1] => Decoder0.IN2
in[2] => Decoder0.IN1
in[3] => Decoder0.IN0
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
is_caps => ~NO_FANOUT~
shift => ~NO_FANOUT~
HEX[0] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= HEX.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display|decode_ascii_hex:d_hex3
in[0] => Decoder0.IN3
in[1] => Decoder0.IN2
in[2] => Decoder0.IN1
in[3] => Decoder0.IN0
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
is_caps => ~NO_FANOUT~
shift => ~NO_FANOUT~
HEX[0] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= HEX.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display|decode_hex:d_hex4
in[0] => Decoder0.IN3
in[1] => Decoder0.IN2
in[2] => Decoder0.IN1
in[3] => Decoder0.IN0
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
HEX[0] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= HEX.DB_MAX_OUTPUT_PORT_TYPE


|Keyboard|ascii:display|decode_hex:d_hex5
in[0] => Decoder0.IN3
in[1] => Decoder0.IN2
in[2] => Decoder0.IN1
in[3] => Decoder0.IN0
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
en => HEX.OUTPUTSELECT
HEX[0] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= HEX.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= HEX.DB_MAX_OUTPUT_PORT_TYPE


